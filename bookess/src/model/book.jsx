/* eslint-disable react-hooks/exhaustive-deps */
/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import BookScreen from '../assets/3d/book.glb'
export function Book(props) {
  const { nodes, materials } = useGLTF(BookScreen);
  const refBook = useRef()

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  // const dampingFactor = 0.95
  const { gl, viewport } = useThree()
  const handlePointerMove = (e) => {
    e.stopPropagation()
    e.preventDefault()

    const clientX = e.touches ? e.touches[0].clientX : e.clientX;

    const delta = (clientX - lastX.current) / viewport.width;
    refBook.current.rotation.z += delta * 0.1 * Math.PI
    lastX.current = clientX
    rotationSpeed.current = delta * 0.01 * Math.PI;

  }
  useEffect(() => {
    // Add event listeners for pointer and keyboard events
    const canvas = gl.domElement;
    canvas.addEventListener("pointermove", handlePointerMove);

    // Remove event listeners when component unmounts
    return () => {
      canvas.removeEventListener("pointermove", handlePointerMove);
    };
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [gl,handlePointerMove]);

  useFrame(() => {
    // refBook.current.rotation.z += rotationSpeed.current;
  })
  return (
    <group {...props} ref={refBook} dispose={null}>
      <group position={[0, 0.003, 0]} scale={[0.89, 0.116, 1]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube002_1.geometry}
          material={materials["Material.003"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube002_2.geometry}
          material={materials["Material.005"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube002_3.geometry}
          material={materials["Material.004"]}
        />
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube.geometry}
        material={materials["Material.006"]}
        position={[0.007, 0.003, 0]}
        scale={[0.89, 0.116, 1]}
      />
    </group>
  );
}

useGLTF.preload("/book.glb");

